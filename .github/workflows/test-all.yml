name: Tests

on:
  pull_request:

  push:
    branches:
      - main

jobs:
  test:
    name: Run tests

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-24.04]
        python-version: ["3.10", "3.12"]
        backend: [numpy, jax]

    env:
      PYOM2_DIR: /home/runner/pyom2
      PETSC_VERSION: "3.23.3"
      OMPI_MCA_rmaps_base_oversubscribe: "1"
      OMPI_MCA_mpi_yield_when_idle: "1"
      VEROS_REQUIRE_CYTHON_EXT: "1"

    steps:
      - uses: actions/checkout@v2

      # make sure tags are fetched so we can get a version
      - run: git fetch --prune --unshallow --tags

      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore pip cache
        uses: actions/cache@v4
        id: pip-cache
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ matrix.os }}-pip-${{ matrix.python-version }}-

      - name: Restore PyOM2 build cache
        uses: actions/cache@v4
        id: pyom2-cache
        with:
          path: ${{ env.PYOM2_DIR }}/py_src/*.so
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('vendor/pyom2/**/*') }}-${{ hashFiles('requirements.txt') }}

      - name: Setup Python environment
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
          pip install cython

      - name: Install system requirements
        run: |
          sudo apt-get update
          sudo apt-get install libopenmpi-dev liblapack-dev libblas-dev

      - name: Install Veros
        run: |
          if [ ${{ matrix.backend }} == "jax" ]
          then
            pip install -e .[test,jax]
          else
            pip install -e .[test]
          fi

      - name: Install optional requirements
        run: |
          # PETSc has issues with mpi4py v4
          pip install "mpi4py<4"
          pip install mpi4jax --no-build-isolation
          pip install petsc==$PETSC_VERSION --no-build-isolation
          pip install petsc4py==$PETSC_VERSION --no-build-isolation

      # Build PyOM2 after Veros to make sure we have compatible versions of NumPy / f2py
      - name: Build PyOM2
        if: steps.pyom2-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p $PYOM2_DIR
          cp -r vendor/pyom2/* $PYOM2_DIR
          pushd $PYOM2_DIR
          pip install meson ninja
          mv pyOM2_site_specific_meson site_specific.mk_
          tar xzf pyOM2.1.0.tar.gz
          git init
          for patchfile in ./patches/*.patch; do
            git apply --whitespace=fix $patchfile
          done
          make -C py_src -j 4 pyOM_code.so
          popd

      - name: Export paths
        run: |
          echo "PYOM2_LIB=$(readlink -f $PYOM2_DIR/py_src/pyOM_code.*.so)" >> $GITHUB_ENV

      - name: Run tests
        run: |
          pytest . -v --cov --pyom2-lib $PYOM2_LIB --backend ${{ matrix.backend }}

      - name: Upload coverage
        uses: codecov/codecov-action@v1
